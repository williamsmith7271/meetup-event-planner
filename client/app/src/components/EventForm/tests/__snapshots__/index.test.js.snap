exports[`<EventForm /> should render with default props 1`] = `
<Form
  className={undefined}
  compact={false}
  fill={false}
  onSubmit={[Function mockFn]}
  pad="none">
  <FormFields>
    <FormField
      error="Value Required"
      help="Set a name for the event."
      htmlFor="name-input"
      label="Name *"
      size="medium"
      strong={false}>
      <input
        active={false}
        aria-invalid="Value Required"
        aria-required={true}
        autoComplete="off"
        autoFocus={true}
        autofilled={false}
        dirty={false}
        error="Value Required"
        id="name-input"
        initialValue=""
        invalid={true}
        name="name"
        placeholder="Bill\'s Birthday"
        pristine={true}
        required={true}
        touched={true}
        type="text"
        valid={false}
        value=""
        visited={true} />
    </FormField>
    <FormField
      error={null}
      help="What type of event is it? Select a value from the list."
      htmlFor="type-input"
      label="Type *"
      size="medium"
      strong={false}>
      <Select
        active={false}
        addLabelText="Add \"{label}\"?"
        aria-invalid="Value Required"
        aria-required={true}
        arrowRenderer={[Function arrowRenderer]}
        autofilled={false}
        autosize={true}
        backspaceRemoves={true}
        backspaceToRemoveMessage="Press backspace to remove {label}"
        clearAllText="Clear all"
        clearValueText="Clear value"
        clearable={true}
        delimiter=","
        dirty={false}
        disabled={false}
        error="Value Required"
        escapeClearsValue={true}
        filterOptions={[Function filterOptions]}
        id="type-input"
        ignoreAccents={true}
        ignoreCase={true}
        initialValue=""
        inputProps={Object {}}
        invalid={true}
        isLoading={false}
        joinValues={false}
        labelKey="label"
        matchPos="any"
        matchProp="any"
        menuBuffer={0}
        menuRenderer={[Function menuRenderer]}
        multi={false}
        name="type"
        noResultsText="No results found"
        onBlur={[Function onBlur]}
        onBlurResetsInput={true}
        onChange={[Function onChange]}
        onCloseResetsInput={true}
        openAfterFocus={false}
        optionComponent={[Function anonymous]}
        options={
          Array [
            Object {
              "label": "Birthday",
              "value": "Birthday"
            },
            Object {
              "label": "Conference",
              "value": "Conference"
            },
            Object {
              "label": "Office",
              "value": "Office"
            },
            Object {
              "label": "Wedding",
              "value": "Wedding"
            },
            Object {
              "label": "Other",
              "value": "Other"
            }
          ]
        }
        pageSize={5}
        placeholder="Select..."
        pristine={true}
        required={true}
        scrollMenuIntoView={true}
        searchable={true}
        simpleValue={false}
        tabSelectsValue={true}
        touched={false}
        type="text"
        valid={false}
        value=""
        valueComponent={[Function anonymous]}
        valueKey="value"
        visited={false} />
    </FormField>
    <FormField
      error={null}
      help="Select host from list, or start typing to add new host."
      htmlFor="host-input"
      label="Host *"
      size="medium"
      strong={false}>
      <CreatableSelect
        active={false}
        aria-invalid="Value Required"
        aria-required={true}
        autofilled={false}
        dirty={false}
        error="Value Required"
        filterOptions={[Function filterOptions]}
        id="host-input"
        initialValue=""
        invalid={true}
        isOptionUnique={[Function isOptionUnique]}
        isValidNewOption={[Function isValidNewOption]}
        menuRenderer={[Function menuRenderer]}
        name="host"
        newOptionCreator={[Function newOptionCreator]}
        onBlur={[Function onBlur]}
        onChange={[Function onChange]}
        options={
          Array [
            Object {
              "label": "Miss Ayden Dach",
              "value": "Miss Ayden Dach"
            },
            Object {
              "label": "Joaquin West",
              "value": "Joaquin West"
            }
          ]
        }
        pristine={true}
        promptTextCreator={[Function promptTextCreator]}
        required={true}
        shouldKeyDownEventCreateNewOption={[Function shouldKeyDownEventCreateNewOption]}
        touched={false}
        type="text"
        valid={false}
        value={
          Object {
            "label": "",
            "value": ""
          }
        }
        visited={false} />
    </FormField>
    <FormField
      className={undefined}
      error={null}
      help="Start typing to find the event location"
      htmlFor="location-input"
      label="Location *"
      size="medium"
      strong={false}>
      <Geosuggest
        active={false}
        aria-invalid="Value Required"
        aria-required={true}
        autoActivateFirstSuggest={false}
        autoComplete="off"
        autofilled={false}
        bounds={null}
        className=""
        country={null}
        dirty={false}
        disabled={false}
        error="Value Required"
        fixtures={Array []}
        getSuggestLabel={[Function getSuggestLabel]}
        googleMaps={null}
        id="location-input"
        ignoreTab={false}
        initialValue=""
        inputClassName=""
        invalid={true}
        location={null}
        name="locationInput"
        onActivateSuggest={[Function onActivateSuggest]}
        onBlur={[Function onBlur]}
        onChange={[Function onChange]}
        onFocus={[Function onFocus]}
        onSuggestNoResults={[Function onSuggestNoResults]}
        onSuggestSelect={[Function onSuggestSelect]}
        placeholder="123 Main St, NY, New York 12345"
        pristine={true}
        queryDelay={250}
        radius={null}
        required={true}
        skipSuggest={[Function skipSuggest]}
        style={
          Object {
            "input": Object {},
            "suggestItem": Object {},
            "suggests": Object {}
          }
        }
        touched={false}
        type="text"
        types={null}
        valid={false}
        value=""
        visited={false} />
    </FormField>
    <FormField
      error="Value Required"
      help="When does it start? Set a Date and Time."
      htmlFor="start-date-input"
      label="Start Date *"
      size="medium"
      strong={false}>
      <DateTime
        active={false}
        aria-invalid="Value Required"
        aria-required={true}
        autoComplete="on"
        autofilled={false}
        dirty={false}
        error="Value Required"
        format="MM/DD/YYYY h:mm a"
        id="start-date-input"
        initialValue=""
        invalid={true}
        name="start"
        pristine={true}
        required={true}
        step="30"
        touched={false}
        type="text"
        valid={false}
        value=""
        visited={false} />
    </FormField>
    <FormField
      error="Value Required"
      help="When does it end? Set a Date and Time."
      htmlFor="end-date-input"
      label="End Date *"
      size="medium"
      strong={false}>
      <DateTime
        active={false}
        aria-invalid="Value Required"
        aria-required={true}
        autoComplete="on"
        autofilled={false}
        dirty={false}
        error="Value Required"
        format="MM/DD/YYYY h:mm a"
        id="end-date-input"
        initialValue=""
        invalid={true}
        name="end"
        onBlur={[Function onBlur]}
        onChange={[Function onChange]}
        pristine={true}
        required={true}
        step="30"
        touched={false}
        type="text"
        valid={false}
        value=""
        visited={false} />
    </FormField>
    <FormField
      error={null}
      help="Add a new guest, or select past guests."
      htmlFor="guests-input"
      label="Guests *"
      size="medium"
      strong={false}
      style={
        Object {
          "position": "relative"
        }
      }>
      <CreatableSelect
        active={false}
        aria-invalid={undefined}
        aria-required={true}
        autofilled={false}
        dirty={false}
        filterOptions={[Function filterOptions]}
        id="guests-input"
        initialValue=""
        invalid={false}
        isOptionUnique={[Function isOptionUnique]}
        isValidNewOption={[Function isValidNewOption]}
        menuRenderer={[Function menuRenderer]}
        multi={true}
        name="guests"
        newOptionCreator={[Function newOptionCreator]}
        onBlur={[Function onBlur]}
        onChange={[Function onChange]}
        options={
          Array [
            Object {
              "label": "Bilbo Baggins",
              "value": "Bilbo Baggins"
            },
            Object {
              "label": "David Harris",
              "value": "David Harris"
            }
          ]
        }
        pristine={true}
        promptTextCreator={[Function promptTextCreator]}
        required={true}
        shouldKeyDownEventCreateNewOption={[Function shouldKeyDownEventCreateNewOption]}
        touched={false}
        type="text"
        valid={true}
        value={
          Array [
            "David Harris"
          ]
        }
        visited={false} />
    </FormField>
    <FormField
      error={null}
      help="Optional message to the guests."
      htmlFor="message-input"
      label="Message"
      size="medium"
      strong={false}>
      <textarea
        active={false}
        aria-invalid={undefined}
        autofilled={false}
        cols="40"
        dirty={false}
        id="message-input"
        initialValue=""
        invalid={false}
        name="message"
        placeholder="BYOB, bring a swimming suit, no wives allowed"
        pristine={true}
        rows="3"
        touched={false}
        type="text"
        valid={true}
        value=""
        visited={false} />
    </FormField>
  </FormFields>
  <Footer
    direction="row"
    justify="center"
    pad={
      Object {
        "vertical": "small"
      }
    }
    responsive={false}>
    <Button
      label="Submit"
      onClick={[Function mockFn]}
      type="button" />
  </Footer>
</Form>
`;
